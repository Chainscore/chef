type Pool @entity {
	# Index of pool in poolInfo on MasterChef contract
	# {pid}
	id: ID!
	lpToken: Bytes!

	# rewarders: [Rewarder!]! @derivedFrom(field: "pool")
	# rewarderPools: [RewarderPool!]! @derivedFrom(field: "pool")
	slpBalance: BigInt!

	sushiRewarder: RewarderPool
	tokenRewarder: RewarderPool

	users: [UserPool!]! @derivedFrom(field: "pool")

	timestamp: BigInt!
	block: BigInt!
}

enum Point {
	BLOCK 
	SECOND
	UNKNOWN
}

type Rewarder @entity {
	# {rewarder}
	id: ID!

	rewardToken: Bytes!
	totalAllocation: BigInt!

	point: Point
	rewardPerPoint: BigInt!

	rewarderPools: [RewarderPool!]! @derivedFrom(field: "rewarder")

	timestamp: BigInt!
	block: BigInt!
}

type RewarderPool @entity {
	# {rewarder}-{pid}
	id: ID!

	allocation: BigInt!

	accTokenPerShare: BigInt!
	lastRewardPoint: BigInt!

	rewarder: Rewarder!
	pool: Pool!

	timestamp: BigInt!
	block: BigInt!
}

type User @entity {
	# {user_address}
	id: ID!
	pools: [UserPool!]! @derivedFrom(field: "user")
}

type UserPool @entity {
	# {user_address}-{pid}
	id: ID!
	user: User!
	pool: Pool!

	# amount of SLP deposited
	amount: BigInt!

	# already claimed reward
	rewardDebt: BigInt!

	timestamp: BigInt!
	block: BigInt!
}