type MiniChef @entity {
	# Contract address
	id: ID!

	#owner: Bytes!
	#migrator: Bytes!

	sushi: Bytes!
	sushiPerSecond: BigInt!
	totalAllocPoint: BigInt!
	#acc_sushi_precision prob better as constant
	#startBlock idk if we need this

	pools: [Pool!] @derivedFrom(field: "miniChef")
	poolCount: BigInt!

	#history: [History!]! @derivedFrom(field: "miniChef")

	timestamp: BigInt!
	block: BigInt!
}

type Pool @entity {
	# Index of pool in poolInfo on MasterChef contract
	id: ID!
	miniChef: MiniChef!
	pair: Bytes!

	rewarder: Rewarder

	allocPoint: BigInt!
	lastRewardTime: BigInt!
	accSushiPerShare: BigInt!

	slpBalance: BigInt!

	users: [UserPool!]! @derivedFrom(field: "pool")
	userCount: BigInt!

	timestamp: BigInt!
	block: BigInt!
}

type NativeRewarderPool @entity {
	# index of pool in poolInfo on ComplexRewarder contracts
	id: ID!

	allocPoint: BigInt!
}

type Rewarder @entity {
	# address
	id: ID!
	rewardToken: Bytes!
	rewardPerSecond: BigInt!

	totalAllocPoint: BigInt!

	timestamp: BigInt!
	block: BigInt!
}

type User @entity {
	id: ID!
	pools: [UserPool!]! @derivedFrom(field: "user")
}

type UserPool @entity {
	# user address concatenated with pool id
	id: ID!
	user: User!
	pool: Pool!

	amount: BigInt!
	rewardDebt: BigInt!
	sushiHarvested: BigInt!

	timestamp: BigInt!
	block: BigInt!
}

